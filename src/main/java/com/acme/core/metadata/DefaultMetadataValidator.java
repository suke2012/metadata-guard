package com.acme.core.metadata;

import com.acme.core.metadata.collection.MetadataCollectionUnit;
import com.acme.core.metadata.rule.ValidationContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 默认元数据验证器实现（简化版本）
 * 
 * 流程：DTO列表 -> Converter -> CollectionUnit -> Processor -> 直接验证
 * 
 * 核心改进：
 * - 支持监控模式从上游传递（MONITOR告警模式/INTERCEPT拦截模式）
 * - 简化验证逻辑，直接使用处理后的数据进行验证
 * - 减少中间层复杂度，提升性能和可维护性
 */
public class DefaultMetadataValidator implements MetadataValidator {
    
    private static final Logger log = LoggerFactory.getLogger(DefaultMetadataValidator.class);
    
    private final ConverterFactory converterFactory;
    private final UnitProcessorChain processorChain;
    private final UnifiedMetadataValidationFacade validationFacade;
    
    public DefaultMetadataValidator(UnifiedMetadataValidationFacade validationFacade) {
        this.validationFacade = validationFacade;
        this.converterFactory = new ConverterFactory();
        this.processorChain = new UnitProcessorChain();
    }
    
    @Override
    public void validate(List<Object> dtoList, Class<? extends DataConverter> converterClass) throws MetaViolationException {
        // 使用默认告警模式
        validate(dtoList, converterClass, MetadataGuard.Mode.MONITOR);
    }
    
    public void validate(List<Object> dtoList, Class<? extends DataConverter> converterClass, MetadataGuard.Mode mode) throws MetaViolationException {
        if (dtoList == null || dtoList.isEmpty()) {
            log.debug("No DTOs provided for validation");
            return;
        }
        
        // 验证列表中的对象是否为同一类型
        validateSameType(dtoList);
        
        try {
            // 步骤1: 获取转换器并转换数据
            DataConverter converter = converterFactory.getConverter(converterClass);
            if (converter == null) {
                handleConverterError(converterClass, mode);
                return;
            }
            
            log.debug("Using converter: {} for {} DTOs in {} mode", 
                     converter.getDescription(), dtoList.size(), mode);
            
            // 步骤2: 转换为监控单元
            List<MetadataCollectionUnit> units = converter.convert(dtoList.toArray());
            if (units == null || units.isEmpty()) {
                log.debug("No collection units generated by converter: {}", converter.getDescription());
                return;
            }
            
            // 步骤3: 处理器链处理（解析特殊字段）
            List<MetadataCollectionUnit> processedUnits = processorChain.processAll(units);
            
            // 步骤4: 直接验证处理后的数据
            validateProcessedUnits(processedUnits, mode);
            
        } catch (Exception e) {
            handleError(e, mode);
        }
    }
    
    @Override
    public void registerConverter(DataConverter converter) {
        converterFactory.registerConverter(converter);
    }
    
    @Override
    public void registerUnitProcessor(UnitProcessor processor) {
        processorChain.registerProcessor(processor);
    }
    
    
    /**
     * 验证列表中的对象是否为同一类型
     */
    private void validateSameType(List<Object> dtoList) throws MetaViolationException {
        if (dtoList.size() <= 1) {
            return; // 单个或空列表无需检查
        }
        
        Class<?> firstType = null;
        for (int i = 0; i < dtoList.size(); i++) {
            Object dto = dtoList.get(i);
            if (dto == null) {
                throw new MetaViolationException("DTO list contains null element at index " + i);
            }
            
            if (firstType == null) {
                firstType = dto.getClass();
            } else if (!firstType.equals(dto.getClass())) {
                throw new MetaViolationException(
                    "All DTOs must be of the same type. Expected: " + firstType.getSimpleName() + 
                    ", but found: " + dto.getClass().getSimpleName() + " at index " + i);
            }
        }
        
        log.debug("Validated {} DTOs of type: {}", dtoList.size(), firstType.getSimpleName());
    }
    
    
    /**
     * 验证处理后的监控单元（简化版本）
     * 直接使用处理后的数据与元数据进行对比验证
     */
    private void validateProcessedUnits(List<MetadataCollectionUnit> processedUnits, MetadataGuard.Mode mode) 
            throws MetaViolationException {
        
        for (int i = 0; i < processedUnits.size(); i++) {
            MetadataCollectionUnit unit = processedUnits.get(i);
            try {
                validateSingleProcessedUnit(unit, mode);
            } catch (MetaViolationException e) {
                String errorMsg = String.format("Validation failed for unit [%d]: %s", i, e.getMessage());
                log.error(errorMsg);
                
                if (mode == MetadataGuard.Mode.INTERCEPT) {
                    throw new MetaViolationException(errorMsg);
                } else {
                    log.warn("Unit [{}] validation failed in MONITOR mode: {}", i, e.getMessage());
                }
            }
        }
    }
    
    /**
     * 验证单个处理后的监控单元（简化版本）
     * 用数据单元的数据与元数据中的数据进行对比
     */
    private void validateSingleProcessedUnit(MetadataCollectionUnit unit, MetadataGuard.Mode mode) 
            throws MetaViolationException {
        
        if (unit == null || unit.getMetadataFields() == null || unit.getMetadataFields().isEmpty()) {
            String errorMsg = "Invalid or empty collection unit";
            log.warn(errorMsg);
            
            if (mode == MetadataGuard.Mode.INTERCEPT) {
                throw new MetaViolationException(errorMsg);
            }
            return;
        }
        
        log.debug("Validating processed unit for userId: {} with {} fields", 
                 unit.getUserId(), unit.getMetadataFields().size());
        
        // 创建优化的验证上下文
        ValidationContext context = createOptimizedContext(mode, unit);
        
        // 直接使用处理后的字段数据进行验证
        Map<String, Object> fieldsToValidate = unit.getMetadataFields();
        validationFacade.validate(fieldsToValidate, context);
        
        log.debug("Processed unit validation completed for userId: {}", unit.getUserId());
    }
    
    /**
     * 创建优化的验证上下文
     */
    private ValidationContext createOptimizedContext(MetadataGuard.Mode mode, MetadataCollectionUnit unit) {
        ValidationContext context = new ValidationContext(mode);
        
        // 批量添加环境变量，避免多次调用
        Map<String, Object> envData = new HashMap<>();
        envData.put("framework", "metadata-guard");
        envData.put("version", "3.0");
        
        // 添加单元特有数据
        if (unit.getUserId() != null) {
            envData.put("userId", unit.getUserId());
        }
        if (unit.getOperateSystem() != null) {
            envData.put("operateSystem", unit.getOperateSystem());
        }
        if (unit.getProdId() != null) {
            envData.put("prodId", unit.getProdId());
        }
        
        // 批量设置环境变量
        envData.forEach(context::putEnv);
        
        return context;
    }
    
    /**
     * 处理转换器错误（简化版本）
     */
    private void handleConverterError(Class<? extends DataConverter> converterClass, MetadataGuard.Mode mode) 
            throws MetaViolationException {
        String errorMsg = "Converter not found or not registered: " + converterClass.getSimpleName() + 
                ". Please register the converter first using registerConverter() method.";
        log.error(errorMsg);
        
        if (mode == MetadataGuard.Mode.INTERCEPT) {
            throw new MetaViolationException(errorMsg);
        } else {
            log.warn("Converter not found in MONITOR mode: {}", converterClass.getSimpleName());
        }
    }
    
    /**
     * 处理一般错误（简化版本）
     */
    private void handleError(Exception e, MetadataGuard.Mode mode) throws MetaViolationException {
        String errorMsg = "Validation process failed: " + e.getMessage();
        log.error(errorMsg, e);
        
        if (mode == MetadataGuard.Mode.INTERCEPT) {
            if (e instanceof MetaViolationException) {
                throw (MetaViolationException) e;
            } else {
                throw new MetaViolationException(errorMsg);
            }
        } else {
            log.warn("Validation failed in MONITOR mode: {}", e.getMessage());
        }
    }
}